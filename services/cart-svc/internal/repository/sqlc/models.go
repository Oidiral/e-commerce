// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type CartStatus string

const (
	CartStatusOPEN      CartStatus = "OPEN"
	CartStatusCHECKOUT  CartStatus = "CHECKOUT"
	CartStatusABANDONED CartStatus = "ABANDONED"
)

func (e *CartStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CartStatus(s)
	case string:
		*e = CartStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CartStatus: %T", src)
	}
	return nil
}

type NullCartStatus struct {
	CartStatus CartStatus
	Valid      bool // Valid is true if CartStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCartStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CartStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CartStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCartStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CartStatus), nil
}

type Cart struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Status    CartStatus
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CartItem struct {
	CartID    uuid.UUID
	ProductID uuid.UUID
	Price     float64
	Quantity  int32
}
