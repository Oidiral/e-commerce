// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cart.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCart = `-- name: CreateCart :one
INSERT INTO cart(user_id, status)
VALUES ($1, 'OPEN')
ON CONFLICT (user_id) DO NOTHING
RETURNING id, user_id, status, created_at, updated_at
`

func (q *Queries) CreateCart(ctx context.Context, userID uuid.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, createCart, userID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCart = `-- name: DeleteCart :execrows
DELETE FROM cart
WHERE id = $1
`

func (q *Queries) DeleteCart(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteCart, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteCartItem = `-- name: DeleteCartItem :execrows
DELETE FROM cart_item
WHERE cart_id = $1
    AND product_id = $2
`

type DeleteCartItemParams struct {
	CartID    uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) DeleteCartItem(ctx context.Context, arg DeleteCartItemParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteCartItem, arg.CartID, arg.ProductID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteExpiredCarts = `-- name: DeleteExpiredCarts :execrows
DELETE FROM cart
WHERE status = 'ABANDONED'
    AND updated_at < NOW() - INTERVAL '30 days'
`

func (q *Queries) DeleteExpiredCarts(ctx context.Context) (int64, error) {
	result, err := q.db.Exec(ctx, deleteExpiredCarts)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getCart = `-- name: GetCart :one
SELECT
  id,
  user_id,
  status,
  created_at,
  updated_at
FROM cart
WHERE id = $1
  AND status IN ('OPEN', 'CHECKOUT')
`

func (q *Queries) GetCart(ctx context.Context, id uuid.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, getCart, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCartByUser = `-- name: GetCartByUser :one
SELECT
  id,
  user_id,
  status,
  created_at,
  updated_at
FROM cart
WHERE user_id = $1
  AND status IN ('OPEN', 'CHECKOUT')
ORDER BY updated_at DESC
LIMIT 1
`

func (q *Queries) GetCartByUser(ctx context.Context, userID uuid.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, getCartByUser, userID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT
  cart_id,
  product_id,
  price,
  quantity
FROM cart_item
WHERE cart_id = $1
ORDER BY product_id
`

func (q *Queries) ListItems(ctx context.Context, cartID uuid.UUID) ([]CartItem, error) {
	rows, err := q.db.Query(ctx, listItems, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CartItem
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.CartID,
			&i.ProductID,
			&i.Price,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartStatus = `-- name: UpdateCartStatus :exec
UPDATE cart
SET status = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateCartStatusParams struct {
	ID     uuid.UUID
	Status CartStatus
}

func (q *Queries) UpdateCartStatus(ctx context.Context, arg UpdateCartStatusParams) error {
	_, err := q.db.Exec(ctx, updateCartStatus, arg.ID, arg.Status)
	return err
}

const updateQuantity = `-- name: UpdateQuantity :execrows
UPDATE cart_item SET quantity = $3
WHERE cart_id = $1
    AND product_id = $2
`

type UpdateQuantityParams struct {
	CartID    uuid.UUID
	ProductID uuid.UUID
	Quantity  int32
}

func (q *Queries) UpdateQuantity(ctx context.Context, arg UpdateQuantityParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateQuantity, arg.CartID, arg.ProductID, arg.Quantity)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const upsertCartItem = `-- name: UpsertCartItem :exec
INSERT INTO cart_item (cart_id, product_id, price, quantity)
VALUES ($1, $2, $3, $4)
ON CONFLICT (cart_id, product_id) DO UPDATE
SET price = EXCLUDED.price,
    quantity = EXCLUDED.quantity
`

type UpsertCartItemParams struct {
	CartID    uuid.UUID
	ProductID uuid.UUID
	Price     float64
	Quantity  int32
}

func (q *Queries) UpsertCartItem(ctx context.Context, arg UpsertCartItemParams) error {
	_, err := q.db.Exec(ctx, upsertCartItem,
		arg.CartID,
		arg.ProductID,
		arg.Price,
		arg.Quantity,
	)
	return err
}
